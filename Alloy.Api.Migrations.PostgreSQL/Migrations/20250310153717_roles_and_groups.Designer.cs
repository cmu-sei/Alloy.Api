/*
Copyright 2021 Carnegie Mellon University. All Rights Reserved. 
 Released under a MIT (SEI)-style license. See LICENSE.md in the project root for license information.
*/

ï»¿// <auto-generated />
using System;
using Alloy.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Alloy.Api.Migrations.PostgreSQL.Migrations
{
    [DbContext(typeof(AlloyContext))]
    [Migration("20250310153717_roles_and_groups")]
    partial class roles_and_groups
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Alloy.Api.Data.Models.EventEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<Guid?>("EventTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_template_id");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration_date");

                    b.Property<int>("FailureCount")
                        .HasColumnType("integer")
                        .HasColumnName("failure_count");

                    b.Property<int>("InternalStatus")
                        .HasColumnType("integer")
                        .HasColumnName("internal_status");

                    b.Property<int>("LastEndInternalStatus")
                        .HasColumnType("integer")
                        .HasColumnName("last_end_internal_status");

                    b.Property<int>("LastEndStatus")
                        .HasColumnType("integer")
                        .HasColumnName("last_end_status");

                    b.Property<int>("LastLaunchInternalStatus")
                        .HasColumnType("integer")
                        .HasColumnName("last_launch_internal_status");

                    b.Property<int>("LastLaunchStatus")
                        .HasColumnType("integer")
                        .HasColumnName("last_launch_status");

                    b.Property<DateTime?>("LaunchDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("launch_date");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("RunId")
                        .HasColumnType("uuid")
                        .HasColumnName("run_id");

                    b.Property<Guid?>("ScenarioId")
                        .HasColumnType("uuid")
                        .HasColumnName("scenario_id");

                    b.Property<string>("ShareCode")
                        .HasColumnType("text")
                        .HasColumnName("share_code");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("status_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("Username")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.Property<Guid?>("ViewId")
                        .HasColumnType("uuid")
                        .HasColumnName("view_id");

                    b.Property<Guid?>("WorkspaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("workspace_id");

                    b.HasKey("Id");

                    b.HasIndex("EventTemplateId");

                    b.ToTable("events");
                });

            modelBuilder.Entity("Alloy.Api.Data.Models.EventMembershipEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("f870d8ee-7332-4f7f-8ee0-63bd07cfd7e4"))
                        .HasColumnName("role_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.HasIndex("EventId", "UserId", "GroupId")
                        .IsUnique();

                    b.ToTable("event_memberships");
                });

            modelBuilder.Entity("Alloy.Api.Data.Models.EventRoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<bool>("AllPermissions")
                        .HasColumnType("boolean")
                        .HasColumnName("all_permissions");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int[]>("Permissions")
                        .HasColumnType("integer[]")
                        .HasColumnName("permissions");

                    b.HasKey("Id");

                    b.ToTable("event_roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1a3f26cd-9d99-4b98-b914-12931e786198"),
                            AllPermissions = true,
                            Description = "Can perform all actions on the Event",
                            Name = "Manager",
                            Permissions = new int[0]
                        },
                        new
                        {
                            Id = new Guid("39aa296e-05ba-4fb0-8d74-c92cf3354c6f"),
                            AllPermissions = false,
                            Description = "Has read only access to the Event",
                            Name = "Observer",
                            Permissions = new[] { 0 }
                        },
                        new
                        {
                            Id = new Guid("f870d8ee-7332-4f7f-8ee0-63bd07cfd7e4"),
                            AllPermissions = false,
                            Description = "Has read only access to the Event",
                            Name = "Member",
                            Permissions = new[] { 0, 1 }
                        });
                });

            modelBuilder.Entity("Alloy.Api.Data.Models.EventTemplateEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("DirectoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("directory_id");

                    b.Property<int>("DurationHours")
                        .HasColumnType("integer")
                        .HasColumnName("duration_hours");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean")
                        .HasColumnName("is_published");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("ScenarioTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("scenario_template_id");

                    b.Property<bool>("UseDynamicHost")
                        .HasColumnType("boolean")
                        .HasColumnName("use_dynamic_host");

                    b.Property<Guid?>("ViewId")
                        .HasColumnType("uuid")
                        .HasColumnName("view_id");

                    b.HasKey("Id");

                    b.ToTable("event_templates");
                });

            modelBuilder.Entity("Alloy.Api.Data.Models.EventTemplateMembershipEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("EventTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_template_id");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("f870d8ee-7332-4f7f-8ee0-63bd07cfd7e4"))
                        .HasColumnName("role_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.HasIndex("EventTemplateId", "UserId", "GroupId")
                        .IsUnique();

                    b.ToTable("event_template_memberships");
                });

            modelBuilder.Entity("Alloy.Api.Data.Models.EventTemplateRoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<bool>("AllPermissions")
                        .HasColumnType("boolean")
                        .HasColumnName("all_permissions");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int[]>("Permissions")
                        .HasColumnType("integer[]")
                        .HasColumnName("permissions");

                    b.HasKey("Id");

                    b.ToTable("event_template_roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1a3f26cd-9d99-4b98-b914-12931e786198"),
                            AllPermissions = true,
                            Description = "Can perform all actions on the EventTemplate",
                            Name = "Manager",
                            Permissions = new int[0]
                        },
                        new
                        {
                            Id = new Guid("39aa296e-05ba-4fb0-8d74-c92cf3354c6f"),
                            AllPermissions = false,
                            Description = "Has read only access to the EventTemplate",
                            Name = "Observer",
                            Permissions = new[] { 0 }
                        },
                        new
                        {
                            Id = new Guid("f870d8ee-7332-4f7f-8ee0-63bd07cfd7e4"),
                            AllPermissions = false,
                            Description = "Has read only access to the EventTemplate",
                            Name = "Member",
                            Permissions = new[] { 0, 1 }
                        });
                });

            modelBuilder.Entity("Alloy.Api.Data.Models.EventUserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("EventId", "UserId")
                        .IsUnique();

                    b.ToTable("event_users");
                });

            modelBuilder.Entity("Alloy.Api.Data.Models.GroupEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("groups");
                });

            modelBuilder.Entity("Alloy.Api.Data.Models.GroupMembershipEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("GroupId", "UserId")
                        .IsUnique();

                    b.ToTable("group_memberships");
                });

            modelBuilder.Entity("Alloy.Api.Data.Models.PermissionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Key")
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<bool>("ReadOnly")
                        .HasColumnType("boolean")
                        .HasColumnName("read_only");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("Key", "Value")
                        .IsUnique();

                    b.ToTable("permissions");
                });

            modelBuilder.Entity("Alloy.Api.Data.Models.SystemRoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<bool>("AllPermissions")
                        .HasColumnType("boolean")
                        .HasColumnName("all_permissions");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("Immutable")
                        .HasColumnType("boolean")
                        .HasColumnName("immutable");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int[]>("Permissions")
                        .HasColumnType("integer[]")
                        .HasColumnName("permissions");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("system_roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f35e8fff-f996-4cba-b303-3ba515ad8d2f"),
                            AllPermissions = true,
                            Description = "Can perform all actions",
                            Immutable = true,
                            Name = "Administrator",
                            Permissions = new int[0]
                        },
                        new
                        {
                            Id = new Guid("d80b73c3-95d7-4468-8650-c62bbd082507"),
                            AllPermissions = false,
                            Description = "Can create and manage their own Event Templates and Events.",
                            Immutable = false,
                            Name = "Content Developer",
                            Permissions = new[] { 0, 4, 7 }
                        },
                        new
                        {
                            Id = new Guid("1da3027e-725d-4753-9455-a836ed9bdb1e"),
                            AllPermissions = false,
                            Description = "Can View all Event Templates and Events, but cannot make any changes.",
                            Immutable = false,
                            Name = "Observer",
                            Permissions = new[] { 1, 5, 9, 11, 13 }
                        });
                });

            modelBuilder.Entity("Alloy.Api.Data.Models.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_modified");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Alloy.Api.Data.Models.EventEntity", b =>
                {
                    b.HasOne("Alloy.Api.Data.Models.EventTemplateEntity", "EventTemplate")
                        .WithMany()
                        .HasForeignKey("EventTemplateId");

                    b.Navigation("EventTemplate");
                });

            modelBuilder.Entity("Alloy.Api.Data.Models.EventMembershipEntity", b =>
                {
                    b.HasOne("Alloy.Api.Data.Models.EventEntity", "Event")
                        .WithMany("Memberships")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Alloy.Api.Data.Models.GroupEntity", "Group")
                        .WithMany("EventMemberships")
                        .HasForeignKey("GroupId");

                    b.HasOne("Alloy.Api.Data.Models.EventRoleEntity", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Alloy.Api.Data.Models.UserEntity", "User")
                        .WithMany("EventMemberships")
                        .HasForeignKey("UserId");

                    b.Navigation("Event");

                    b.Navigation("Group");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Alloy.Api.Data.Models.EventTemplateMembershipEntity", b =>
                {
                    b.HasOne("Alloy.Api.Data.Models.EventTemplateEntity", "EventTemplate")
                        .WithMany("Memberships")
                        .HasForeignKey("EventTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Alloy.Api.Data.Models.GroupEntity", "Group")
                        .WithMany("EventTemplateMemberships")
                        .HasForeignKey("GroupId");

                    b.HasOne("Alloy.Api.Data.Models.EventTemplateRoleEntity", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Alloy.Api.Data.Models.UserEntity", "User")
                        .WithMany("EventTemplateMemberships")
                        .HasForeignKey("UserId");

                    b.Navigation("EventTemplate");

                    b.Navigation("Group");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Alloy.Api.Data.Models.EventUserEntity", b =>
                {
                    b.HasOne("Alloy.Api.Data.Models.EventEntity", "Event")
                        .WithMany("EventUsers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Alloy.Api.Data.Models.GroupMembershipEntity", b =>
                {
                    b.HasOne("Alloy.Api.Data.Models.GroupEntity", "Group")
                        .WithMany("Memberships")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Alloy.Api.Data.Models.UserEntity", "User")
                        .WithMany("GroupMemberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Alloy.Api.Data.Models.UserEntity", b =>
                {
                    b.HasOne("Alloy.Api.Data.Models.SystemRoleEntity", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Alloy.Api.Data.Models.EventEntity", b =>
                {
                    b.Navigation("EventUsers");

                    b.Navigation("Memberships");
                });

            modelBuilder.Entity("Alloy.Api.Data.Models.EventTemplateEntity", b =>
                {
                    b.Navigation("Memberships");
                });

            modelBuilder.Entity("Alloy.Api.Data.Models.GroupEntity", b =>
                {
                    b.Navigation("EventMemberships");

                    b.Navigation("EventTemplateMemberships");

                    b.Navigation("Memberships");
                });

            modelBuilder.Entity("Alloy.Api.Data.Models.UserEntity", b =>
                {
                    b.Navigation("EventMemberships");

                    b.Navigation("EventTemplateMemberships");

                    b.Navigation("GroupMemberships");
                });
#pragma warning restore 612, 618
        }
    }
}
